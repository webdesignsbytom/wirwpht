generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  DEVELOPER
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  password    String
  name        String?
  username    String
  role        Role          @default(USER)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  Comment     Comment[]
  Like        Like[]
  CommentLike CommentLike[]
}

model Item {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  imageUrl  String    @unique
  cost      Decimal   @default(0)
  effect    String    @default("")
  desc      String
  ratings   Int[]     @default([5])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Comment   Comment[]
  Like      Like[]
}

model Comment {
  id        Int           @id @default(autoincrement())
  content   String        @db.VarChar(150)
  userId    Int
  user      User          @relation(fields: [userId], references: [id])
  itemId    Int
  item      Item          @relation(fields: [itemId], references: [id], onDelete: Cascade)
  likes     CommentLike[]
  parentId  Int?
  parent    Comment?      @relation("replies", fields: [parentId], references: [id])
  replies   Comment[]     @relation("replies")
  createdAt DateTime      @default(now())
  updatedAt DateTime?     @updatedAt
}

model Like {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, itemId])
}

model CommentLike {
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}
